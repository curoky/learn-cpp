<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="454.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="437" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="437" > </text>
<g id="frames">
<g >
<title>std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_reserve_map_at_back(unsigned long) (529,420 samples, 0.49%)</title><rect x="315.1" y="245" width="5.8" height="15.0" fill="rgb(237,5,19)" rx="2" ry="2" />
<text  x="318.08" y="255.5" ></text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003d00&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="357" width="6.2" height="15.0" fill="rgb(228,138,6)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>imalloc[inline] (566,534 samples, 0.53%)</title><rect x="10.0" y="309" width="6.2" height="15.0" fill="rgb(253,97,22)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate(unsigned long, void const*) (20,600,179 samples, 19.13%)</title><rect x="320.9" y="197" width="225.8" height="15.0" fill="rgb(253,87,36)" rx="2" ry="2" />
<text  x="323.88" y="207.5" >std::__new_allocator&lt;std::__c..</text>
</g>
<g >
<title>je_prof_tctx_create&lt;00000000000b08e0&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="261" width="6.2" height="15.0" fill="rgb(231,25,49)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>je_prof_backtrace&lt;00000000000c5bb0&gt; (12,589,057 samples, 11.69%)</title><rect x="177.1" y="85" width="138.0" height="15.0" fill="rgb(248,50,38)" rx="2" ry="2" />
<text  x="180.11" y="95.5" >je_prof_backtrace..</text>
</g>
<g >
<title>je_malloc_default&lt;0000000000039170&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="325" width="6.2" height="15.0" fill="rgb(230,101,4)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::allocate(unsigned long, void const*) (529,420 samples, 0.49%)</title><rect x="315.1" y="165" width="5.8" height="15.0" fill="rgb(219,126,38)" rx="2" ry="2" />
<text  x="318.08" y="175.5" ></text>
</g>
<g >
<title>prof_backtrace_impl&lt;00000000000c5550&gt; (14,680,736 samples, 13.64%)</title><rect x="16.2" y="69" width="160.9" height="15.0" fill="rgb(207,80,32)" rx="2" ry="2" />
<text  x="19.21" y="79.5" >prof_backtrace_impl&lt;..</text>
</g>
<g >
<title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate(unsigned long)[inline] (20,600,179 samples, 19.13%)</title><rect x="320.9" y="213" width="225.8" height="15.0" fill="rgb(242,110,21)" rx="2" ry="2" />
<text  x="323.88" y="223.5" >std::allocator&lt;std::__cxx11::..</text>
</g>
<g >
<title>void std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_push_back_aux&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (13,118,477 samples, 12.18%)</title><rect x="177.1" y="261" width="143.8" height="15.0" fill="rgb(254,91,30)" rx="2" ry="2" />
<text  x="180.11" y="271.5" >void std::deque&lt;st..</text>
</g>
<g >
<title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (20,600,179 samples, 19.13%)</title><rect x="320.9" y="293" width="225.8" height="15.0" fill="rgb(246,197,46)" rx="2" ry="2" />
<text  x="323.88" y="303.5" >std::vector&lt;std::__cxx11::bas..</text>
</g>
<g >
<title>je_prof_backtrace&lt;00000000000c5bb0&gt; (20,600,179 samples, 19.13%)</title><rect x="320.9" y="85" width="225.8" height="15.0" fill="rgb(207,143,6)" rx="2" ry="2" />
<text  x="323.88" y="95.5" >je_prof_backtrace&lt;00000000000..</text>
</g>
<g >
<title>imalloc_body[inline] (20,600,179 samples, 19.13%)</title><rect x="320.9" y="133" width="225.8" height="15.0" fill="rgb(210,142,11)" rx="2" ry="2" />
<text  x="323.88" y="143.5" >imalloc_body[inline]</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, unsigned long) (20,600,179 samples, 19.13%)</title><rect x="320.9" y="229" width="225.8" height="15.0" fill="rgb(245,172,40)" rx="2" ry="2" />
<text  x="323.88" y="239.5" >std::allocator_traits&lt;std::al..</text>
</g>
<g >
<title>imalloc_body[inline] (529,420 samples, 0.49%)</title><rect x="315.1" y="101" width="5.8" height="15.0" fill="rgb(216,23,43)" rx="2" ry="2" />
<text  x="318.08" y="111.5" ></text>
</g>
<g >
<title>imalloc_body[inline] (566,534 samples, 0.53%)</title><rect x="10.0" y="293" width="6.2" height="15.0" fill="rgb(230,61,2)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>std::_List_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;* std::__cxx11::list&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_create_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (14,680,736 samples, 13.64%)</title><rect x="16.2" y="261" width="160.9" height="15.0" fill="rgb(244,40,53)" rx="2" ry="2" />
<text  x="19.21" y="271.5" >std::_List_node&lt;std:..</text>
</g>
<g >
<title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate(unsigned long)[inline] (12,589,057 samples, 11.69%)</title><rect x="177.1" y="213" width="138.0" height="15.0" fill="rgb(246,185,54)" rx="2" ry="2" />
<text  x="180.11" y="223.5" >std::allocator&lt;st..</text>
</g>
<g >
<title>je_prof_tctx_create&lt;00000000000b08e0&gt; (12,589,057 samples, 11.69%)</title><rect x="177.1" y="101" width="138.0" height="15.0" fill="rgb(229,78,9)" rx="2" ry="2" />
<text  x="180.11" y="111.5" >je_prof_tctx_crea..</text>
</g>
<g >
<title>main&lt;0000000000026e8c&gt; (107,100,232 samples, 99.47%)</title><rect x="16.2" y="341" width="1173.8" height="15.0" fill="rgb(245,0,42)" rx="2" ry="2" />
<text  x="19.21" y="351.5" >main&lt;0000000000026e8c&gt;</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;&amp;, unsigned long) (12,589,057 samples, 11.69%)</title><rect x="177.1" y="229" width="138.0" height="15.0" fill="rgb(239,76,32)" rx="2" ry="2" />
<text  x="180.11" y="239.5" >std::allocator_tr..</text>
</g>
<g >
<title>je_prof_tctx_create&lt;00000000000b08e0&gt; (529,420 samples, 0.49%)</title><rect x="315.1" y="69" width="5.8" height="15.0" fill="rgb(229,185,40)" rx="2" ry="2" />
<text  x="318.08" y="79.5" ></text>
</g>
<g >
<title>prof_alloc_prep[inline] (14,680,736 samples, 13.64%)</title><rect x="16.2" y="117" width="160.9" height="15.0" fill="rgb(239,207,48)" rx="2" ry="2" />
<text  x="19.21" y="127.5" >prof_alloc_prep[inli..</text>
</g>
<g >
<title>void* fallback_impl&lt;false&gt;(unsigned long)&lt;00000000000de820&gt; (12,589,057 samples, 11.69%)</title><rect x="177.1" y="181" width="138.0" height="15.0" fill="rgb(231,50,41)" rx="2" ry="2" />
<text  x="180.11" y="191.5" >void* fallback_im..</text>
</g>
<g >
<title>prof_alloc_prep[inline] (12,589,057 samples, 11.69%)</title><rect x="177.1" y="117" width="138.0" height="15.0" fill="rgb(219,28,50)" rx="2" ry="2" />
<text  x="180.11" y="127.5" >prof_alloc_prep[i..</text>
</g>
<g >
<title>void* fallback_impl&lt;false&gt;(unsigned long)&lt;00000000000de820&gt; (529,420 samples, 0.49%)</title><rect x="315.1" y="149" width="5.8" height="15.0" fill="rgb(254,18,29)" rx="2" ry="2" />
<text  x="318.08" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::_List_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;::allocate(std::allocator&lt;std::_List_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;&amp;, unsigned long) (14,680,736 samples, 13.64%)</title><rect x="16.2" y="229" width="160.9" height="15.0" fill="rgb(224,43,17)" rx="2" ry="2" />
<text  x="19.21" y="239.5" >std::allocator_trait..</text>
</g>
<g >
<title>je_prof_tctx_create&lt;00000000000b08e0&gt; (58,700,840 samples, 54.52%)</title><rect x="546.7" y="261" width="643.3" height="15.0" fill="rgb(213,216,51)" rx="2" ry="2" />
<text  x="549.65" y="271.5" >je_prof_tctx_create&lt;00000000000b08e0&gt;</text>
</g>
<g >
<title>je_prof_tctx_create&lt;00000000000b08e0&gt; (20,600,179 samples, 19.13%)</title><rect x="320.9" y="101" width="225.8" height="15.0" fill="rgb(218,60,38)" rx="2" ry="2" />
<text  x="323.88" y="111.5" >je_prof_tctx_create&lt;000000000..</text>
</g>
<g >
<title>prof_backtrace_impl&lt;00000000000c5550&gt; (529,420 samples, 0.49%)</title><rect x="315.1" y="37" width="5.8" height="15.0" fill="rgb(214,4,46)" rx="2" ry="2" />
<text  x="318.08" y="47.5" ></text>
</g>
<g >
<title>je_prof_tctx_create&lt;00000000000b08e0&gt; (14,680,736 samples, 13.64%)</title><rect x="16.2" y="101" width="160.9" height="15.0" fill="rgb(213,205,29)" rx="2" ry="2" />
<text  x="19.21" y="111.5" >je_prof_tctx_create&lt;..</text>
</g>
<g >
<title>prof_backtrace_impl&lt;00000000000c5550&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="229" width="6.2" height="15.0" fill="rgb(216,13,30)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>prof_alloc_prep[inline] (20,600,179 samples, 19.13%)</title><rect x="320.9" y="117" width="225.8" height="15.0" fill="rgb(218,63,1)" rx="2" ry="2" />
<text  x="323.88" y="127.5" >prof_alloc_prep[inline]</text>
</g>
<g >
<title>je_malloc_default&lt;0000000000039170&gt; (14,680,736 samples, 13.64%)</title><rect x="16.2" y="165" width="160.9" height="15.0" fill="rgb(212,71,27)" rx="2" ry="2" />
<text  x="19.21" y="175.5" >je_malloc_default&lt;00..</text>
</g>
<g >
<title>je_prof_backtrace&lt;00000000000c5bb0&gt; (529,420 samples, 0.49%)</title><rect x="315.1" y="53" width="5.8" height="15.0" fill="rgb(224,38,25)" rx="2" ry="2" />
<text  x="318.08" y="63.5" ></text>
</g>
<g >
<title>insertToTrash(std::__cxx11::list&lt;std::any, std::allocator&lt;std::any&gt; &gt;&amp;)&lt;0000000000026c89&gt; (48,399,392 samples, 44.95%)</title><rect x="16.2" y="325" width="530.5" height="15.0" fill="rgb(250,69,29)" rx="2" ry="2" />
<text  x="19.21" y="335.5" >insertToTrash(std::__cxx11::list&lt;std::any, std::allocator&lt;std::any&gt; &gt;&amp;)&lt;..</text>
</g>
<g >
<title>prof_alloc_prep[inline] (566,534 samples, 0.53%)</title><rect x="10.0" y="277" width="6.2" height="15.0" fill="rgb(250,222,16)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>void* fallback_impl&lt;false&gt;(unsigned long)&lt;00000000000de820&gt; (20,600,179 samples, 19.13%)</title><rect x="320.9" y="181" width="225.8" height="15.0" fill="rgb(205,213,24)" rx="2" ry="2" />
<text  x="323.88" y="191.5" >void* fallback_impl&lt;false&gt;(un..</text>
</g>
<g >
<title>je_malloc_default&lt;0000000000039170&gt; (12,589,057 samples, 11.69%)</title><rect x="177.1" y="165" width="138.0" height="15.0" fill="rgb(233,144,32)" rx="2" ry="2" />
<text  x="180.11" y="175.5" >je_malloc_default..</text>
</g>
<g >
<title>prof_alloc_prep[inline] (58,700,840 samples, 54.52%)</title><rect x="546.7" y="277" width="643.3" height="15.0" fill="rgb(253,51,32)" rx="2" ry="2" />
<text  x="549.65" y="287.5" >prof_alloc_prep[inline]</text>
</g>
<g >
<title>prof_alloc_prep[inline] (529,420 samples, 0.49%)</title><rect x="315.1" y="85" width="5.8" height="15.0" fill="rgb(239,22,33)" rx="2" ry="2" />
<text  x="318.08" y="95.5" ></text>
</g>
<g >
<title>imalloc_body[inline] (58,700,840 samples, 54.52%)</title><rect x="546.7" y="293" width="643.3" height="15.0" fill="rgb(224,148,15)" rx="2" ry="2" />
<text  x="549.65" y="303.5" >imalloc_body[inline]</text>
</g>
<g >
<title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (20,600,179 samples, 19.13%)</title><rect x="320.9" y="261" width="225.8" height="15.0" fill="rgb(217,130,48)" rx="2" ry="2" />
<text  x="323.88" y="271.5" >void std::vector&lt;std::__cxx11..</text>
</g>
<g >
<title>prof_backtrace_impl&lt;00000000000c5550&gt; (58,700,840 samples, 54.52%)</title><rect x="546.7" y="229" width="643.3" height="15.0" fill="rgb(217,61,27)" rx="2" ry="2" />
<text  x="549.65" y="239.5" >prof_backtrace_impl&lt;00000000000c5550&gt;</text>
</g>
<g >
<title>std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_reallocate_map(unsigned long, bool) (529,420 samples, 0.49%)</title><rect x="315.1" y="229" width="5.8" height="15.0" fill="rgb(225,151,54)" rx="2" ry="2" />
<text  x="318.08" y="239.5" ></text>
</g>
<g >
<title>je_malloc_default&lt;0000000000039170&gt; (20,600,179 samples, 19.13%)</title><rect x="320.9" y="165" width="225.8" height="15.0" fill="rgb(231,127,39)" rx="2" ry="2" />
<text  x="323.88" y="175.5" >je_malloc_default&lt;00000000000..</text>
</g>
<g >
<title>std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (13,118,477 samples, 12.18%)</title><rect x="177.1" y="293" width="143.8" height="15.0" fill="rgb(211,15,40)" rx="2" ry="2" />
<text  x="180.11" y="303.5" >std::deque&lt;std::__..</text>
</g>
<g >
<title>je_malloc_default&lt;0000000000039170&gt; (58,700,840 samples, 54.52%)</title><rect x="546.7" y="325" width="643.3" height="15.0" fill="rgb(220,83,5)" rx="2" ry="2" />
<text  x="549.65" y="335.5" >je_malloc_default&lt;0000000000039170&gt;</text>
</g>
<g >
<title>imalloc[inline] (58,700,840 samples, 54.52%)</title><rect x="546.7" y="309" width="643.3" height="15.0" fill="rgb(236,189,7)" rx="2" ry="2" />
<text  x="549.65" y="319.5" >imalloc[inline]</text>
</g>
<g >
<title>je_prof_backtrace&lt;00000000000c5bb0&gt; (14,680,736 samples, 13.64%)</title><rect x="16.2" y="85" width="160.9" height="15.0" fill="rgb(247,31,18)" rx="2" ry="2" />
<text  x="19.21" y="95.5" >je_prof_backtrace&lt;00..</text>
</g>
<g >
<title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate(unsigned long, void const*) (12,589,057 samples, 11.69%)</title><rect x="177.1" y="197" width="138.0" height="15.0" fill="rgb(219,40,32)" rx="2" ry="2" />
<text  x="180.11" y="207.5" >std::__new_alloca..</text>
</g>
<g >
<title>__libc_start_main@GLIBC_2.2.5 (107,100,232 samples, 99.47%)</title><rect x="16.2" y="373" width="1173.8" height="15.0" fill="rgb(231,112,41)" rx="2" ry="2" />
<text  x="19.21" y="383.5" >__libc_start_main@GLIBC_2.2.5</text>
</g>
<g >
<title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate(unsigned long) (20,600,179 samples, 19.13%)</title><rect x="320.9" y="245" width="225.8" height="15.0" fill="rgb(228,128,12)" rx="2" ry="2" />
<text  x="323.88" y="255.5" >std::_Vector_base&lt;std::__cxx1..</text>
</g>
<g >
<title>imalloc[inline] (12,589,057 samples, 11.69%)</title><rect x="177.1" y="149" width="138.0" height="15.0" fill="rgb(250,48,15)" rx="2" ry="2" />
<text  x="180.11" y="159.5" >imalloc[inline]</text>
</g>
<g >
<title>void std::__cxx11::list&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::_List_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (14,680,736 samples, 13.64%)</title><rect x="16.2" y="277" width="160.9" height="15.0" fill="rgb(216,0,30)" rx="2" ry="2" />
<text  x="19.21" y="287.5" >void std::__cxx11::l..</text>
</g>
<g >
<title>std::__cxx11::list&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (14,680,736 samples, 13.64%)</title><rect x="16.2" y="293" width="160.9" height="15.0" fill="rgb(238,225,52)" rx="2" ry="2" />
<text  x="19.21" y="303.5" >std::__cxx11::list&lt;s..</text>
</g>
<g >
<title>__libc_init_first@@GLIBC_2.2.5&lt;0000000000023480&gt; (107,100,232 samples, 99.47%)</title><rect x="16.2" y="357" width="1173.8" height="15.0" fill="rgb(206,163,38)" rx="2" ry="2" />
<text  x="19.21" y="367.5" >__libc_init_first@@GLIBC_2.2.5&lt;0000000000023480&gt;</text>
</g>
<g >
<title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;::allocate(unsigned long)[inline] (529,420 samples, 0.49%)</title><rect x="315.1" y="181" width="5.8" height="15.0" fill="rgb(237,82,50)" rx="2" ry="2" />
<text  x="318.08" y="191.5" ></text>
</g>
<g >
<title>std::__throw_ios_failure(char const*, int)@@GLIBCXX_3.4.26&lt;00000000000a5d14&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="341" width="6.2" height="15.0" fill="rgb(218,109,1)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>_start&lt;0000000000026ba0&gt; (107,100,232 samples, 99.47%)</title><rect x="16.2" y="389" width="1173.8" height="15.0" fill="rgb(243,204,6)" rx="2" ry="2" />
<text  x="19.21" y="399.5" >_start&lt;0000000000026ba0&gt;</text>
</g>
<g >
<title>all (107,666,766 samples, 100%)</title><rect x="10.0" y="405" width="1180.0" height="15.0" fill="rgb(244,33,4)" rx="2" ry="2" />
<text  x="13.00" y="415.5" ></text>
</g>
<g >
<title>std::__cxx11::_List_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_get_node() (14,680,736 samples, 13.64%)</title><rect x="16.2" y="245" width="160.9" height="15.0" fill="rgb(226,71,9)" rx="2" ry="2" />
<text  x="19.21" y="255.5" >std::__cxx11::_List_..</text>
</g>
<g >
<title>imalloc[inline] (20,600,179 samples, 19.13%)</title><rect x="320.9" y="149" width="225.8" height="15.0" fill="rgb(226,24,41)" rx="2" ry="2" />
<text  x="323.88" y="159.5" >imalloc[inline]</text>
</g>
<g >
<title>je_prof_backtrace&lt;00000000000c5bb0&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="245" width="6.2" height="15.0" fill="rgb(239,141,32)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>prof_backtrace_impl&lt;00000000000c5550&gt; (12,589,057 samples, 11.69%)</title><rect x="177.1" y="69" width="138.0" height="15.0" fill="rgb(234,32,35)" rx="2" ry="2" />
<text  x="180.11" y="79.5" >prof_backtrace_im..</text>
</g>
<g >
<title>__nptl_change_stack_perm@@GLIBC_PRIVATE&lt;0000000000003d00&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="373" width="6.2" height="15.0" fill="rgb(237,77,20)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::_List_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate(unsigned long)[inline] (14,680,736 samples, 13.64%)</title><rect x="16.2" y="213" width="160.9" height="15.0" fill="rgb(222,191,16)" rx="2" ry="2" />
<text  x="19.21" y="223.5" >std::allocator&lt;std::..</text>
</g>
<g >
<title>auto createContainer&lt;std::__cxx11::list&gt;()&lt;000000000002787c&gt; (14,680,736 samples, 13.64%)</title><rect x="16.2" y="309" width="160.9" height="15.0" fill="rgb(236,198,29)" rx="2" ry="2" />
<text  x="19.21" y="319.5" >auto createContainer..</text>
</g>
<g >
<title>imalloc_body[inline] (14,680,736 samples, 13.64%)</title><rect x="16.2" y="133" width="160.9" height="15.0" fill="rgb(217,192,22)" rx="2" ry="2" />
<text  x="19.21" y="143.5" >imalloc_body[inline]</text>
</g>
<g >
<title>imalloc[inline] (14,680,736 samples, 13.64%)</title><rect x="16.2" y="149" width="160.9" height="15.0" fill="rgb(217,228,52)" rx="2" ry="2" />
<text  x="19.21" y="159.5" >imalloc[inline]</text>
</g>
<g >
<title>auto createContainer&lt;std::vector&gt;()&lt;000000000002756c&gt; (20,600,179 samples, 19.13%)</title><rect x="320.9" y="309" width="225.8" height="15.0" fill="rgb(253,15,37)" rx="2" ry="2" />
<text  x="323.88" y="319.5" >auto createContainer&lt;std::vec..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::deque&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (13,118,477 samples, 12.18%)</title><rect x="177.1" y="277" width="143.8" height="15.0" fill="rgb(248,226,20)" rx="2" ry="2" />
<text  x="180.11" y="287.5" >std::__cxx11::basi..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; &gt;::allocate(std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt;&amp;, unsigned long) (529,420 samples, 0.49%)</title><rect x="315.1" y="197" width="5.8" height="15.0" fill="rgb(249,13,10)" rx="2" ry="2" />
<text  x="318.08" y="207.5" ></text>
</g>
<g >
<title>void* fallback_impl&lt;false&gt;(unsigned long)&lt;00000000000de820&gt; (14,680,736 samples, 13.64%)</title><rect x="16.2" y="181" width="160.9" height="15.0" fill="rgb(253,70,53)" rx="2" ry="2" />
<text  x="19.21" y="191.5" >void* fallback_impl&lt;..</text>
</g>
<g >
<title>std::_Deque_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_node() (12,589,057 samples, 11.69%)</title><rect x="177.1" y="245" width="138.0" height="15.0" fill="rgb(246,58,28)" rx="2" ry="2" />
<text  x="180.11" y="255.5" >std::_Deque_base&lt;..</text>
</g>
<g >
<title>imalloc[inline] (529,420 samples, 0.49%)</title><rect x="315.1" y="117" width="5.8" height="15.0" fill="rgb(207,198,12)" rx="2" ry="2" />
<text  x="318.08" y="127.5" ></text>
</g>
<g >
<title>auto createContainer&lt;std::deque&gt;()&lt;0000000000027684&gt; (13,118,477 samples, 12.18%)</title><rect x="177.1" y="309" width="143.8" height="15.0" fill="rgb(224,67,26)" rx="2" ry="2" />
<text  x="180.11" y="319.5" >auto createContain..</text>
</g>
<g >
<title>std::_Deque_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate_map(unsigned long) (529,420 samples, 0.49%)</title><rect x="315.1" y="213" width="5.8" height="15.0" fill="rgb(244,20,48)" rx="2" ry="2" />
<text  x="318.08" y="223.5" ></text>
</g>
<g >
<title>std::__new_allocator&lt;std::_List_node&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate(unsigned long, void const*) (14,680,736 samples, 13.64%)</title><rect x="16.2" y="197" width="160.9" height="15.0" fill="rgb(252,33,48)" rx="2" ry="2" />
<text  x="19.21" y="207.5" >std::__new_allocator..</text>
</g>
<g >
<title>prof_backtrace_impl&lt;00000000000c5550&gt; (20,600,179 samples, 19.13%)</title><rect x="320.9" y="69" width="225.8" height="15.0" fill="rgb(237,178,22)" rx="2" ry="2" />
<text  x="323.88" y="79.5" >prof_backtrace_impl&lt;000000000..</text>
</g>
<g >
<title>je_prof_backtrace&lt;00000000000c5bb0&gt; (58,700,840 samples, 54.52%)</title><rect x="546.7" y="245" width="643.3" height="15.0" fill="rgb(222,153,0)" rx="2" ry="2" />
<text  x="549.65" y="255.5" >je_prof_backtrace&lt;00000000000c5bb0&gt;</text>
</g>
<g >
<title>je_malloc_default&lt;0000000000039170&gt; (529,420 samples, 0.49%)</title><rect x="315.1" y="133" width="5.8" height="15.0" fill="rgb(254,17,52)" rx="2" ry="2" />
<text  x="318.08" y="143.5" ></text>
</g>
<g >
<title>imalloc_body[inline] (12,589,057 samples, 11.69%)</title><rect x="177.1" y="133" width="138.0" height="15.0" fill="rgb(244,59,41)" rx="2" ry="2" />
<text  x="180.11" y="143.5" >imalloc_body[inli..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&amp;) (20,600,179 samples, 19.13%)</title><rect x="320.9" y="277" width="225.8" height="15.0" fill="rgb(243,192,42)" rx="2" ry="2" />
<text  x="323.88" y="287.5" >std::__cxx11::basic_string&lt;ch..</text>
</g>
<g >
<title>_dl_catch_error@@GLIBC_PRIVATE&lt;000000000001acb0&gt; (566,534 samples, 0.53%)</title><rect x="10.0" y="389" width="6.2" height="15.0" fill="rgb(210,165,41)" rx="2" ry="2" />
<text  x="13.00" y="399.5" ></text>
</g>
</g>
</svg>
